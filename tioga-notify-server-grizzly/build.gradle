project(":tioga-notify-server-grizzly") {

    apply plugin: "distribution"

    apply plugin: "application"
    mainClassName = "org.tiogasolutions.notify.server.grizzly.NotifyServer"

    version = tiogaAppVersion

    dependencies {
        compile(project(":tioga-notify-engine"))


        compile(project(":tioga-notify-processor-push"))
        compile(project(":tioga-notify-processor-swing"))
        compile(project(":tioga-notify-processor-smtp"))
        compile(project(":tioga-notify-processor-logger"))
        compile(project(":tioga-notify-processor-slack"))

        compile("org.glassfish.jersey.ext:jersey-spring3:2.22.2")

        compile("org.tiogasolutions.lib:tioga-lib-spring:+")
        compile("org.tiogasolutions.runners:tioga-runners-grizzly:+")

        // required by Jersey-Spring's stupid attempt to check for a ServletContext
        compile("javax.servlet:javax.servlet-api:3.1.0")
    }

    task aws << {
        File buildfile = file("$buildDir/aws/Buildfile")
        buildfile.parentFile.mkdirs()
        FileWriter writer = new FileWriter(buildfile)
        writer.write("build: unzip -qo ${project.name}-${project.version}.zip\n")
        writer.close()

        File procfile = file("$buildDir/aws/Procfile")
        procfile.parentFile.mkdirs()
        writer = new FileWriter(procfile)
        writer.write("web: ${project.name}-${project.version}/bin/${project.name}\n")
        writer.close()
    }

    distributions {
        main {
            contents {
                into("lib") {
                    from(jar)
                    from(project.configurations.runtime)
                }
            }
        }
    }

    jar {
        manifest {
            attributes(
                    "Module-Name": project.name,
                    "Implementation-Version": project.version,
                    "Build-Number": "${System.getenv('CODEBUILD_SOURCE_VERSION')}",
                    "Build-Timestamp": new Date().format("yyyy-MM.dd HH:mm:ss"),
                    "Main-Class": "${mainClassName}",
                    "Class-Path": configurations.compile.collect { "./libs/" + it.getName() }.join(" ")
            )
        }
    }

    apply(from: urlCache.get("https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-deployer.gradle"))

    task importAdminApp << {
        File dest = file("${projectDir}/src/main/resources/org/tiogasolutions/notify/admin/app")
        if (dest.deleteDir() == false) throw new IOException("Unable to delete files: " + dest)

        copy {
            from "${projectDir}/../tioga-notify-admin-app"
            into dest
        }
    }

    build.dependsOn(importAdminApp)
}











