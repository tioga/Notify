project(":tioga-notify-server-grizzly") {

    apply plugin: 'distribution'

    version = tiogaAppVersion

    dependencies {
        compile(project(":tioga-notify-engine"))


        compile(project(":tioga-notify-processor-push"))
        compile(project(":tioga-notify-processor-swing"))
        compile(project(":tioga-notify-processor-smtp"))
        compile(project(":tioga-notify-processor-logger"))
        compile(project(":tioga-notify-processor-slack"))

        compile("org.glassfish.jersey.ext:jersey-spring3:2.22.2")

        compile("org.tiogasolutions.lib:tioga-lib-spring:+")
        compile("org.tiogasolutions.runners:tioga-runners-grizzly:+")

        // required by Jersey-Spring's stupid attempt to check for a ServletContext
        compile("javax.servlet:javax.servlet-api:3.1.0")
    }

    task awsS3(type: Copy, dependsOn: Assemble) {
        from("./build/distributions/${project.name}-${project.version}.zip")
        into("./build/aws/")
        rename("${project.name}-${project.version}.zip", "${project.name}-${System.getenv('BUILD_VCS_NUMBER')}.zip")
    }

    File procfile = file("$buildDir/aws/Procfile")
    task createProcfile << {
        procfile.parentFile.mkdirs()
        FileWriter writer = new FileWriter(procfile)
        writer.write("web: java -cp ./lib/* org.tiogasolutions.notify.server.grizzly.NotifyServer\n")
        writer.close()
    }

    distributions {
        main {
            contents {
                into("lib") {
                    from(jar)
                    from(project.configurations.runtime)
                }
                from(procfile, createProcfile)
            }
        }
    }

    jar {
        into("libs") {
            from configurations.runtime
        }
        manifest {
            attributes(
                    "Module-Name": "Grizzly Notify Server",
                    "Implementation-Version": project.version,
                    "Build-Timestamp": new Date().format("yyyy-MM.dd HH:mm:ss"),
                    "Main-Class": "org.tiogasolutions.notify.server.grizzly.NotifyServerLauncher",
                    "Class-Path": configurations.compile.collect { "./libs/" + it.getName() }.join(" ")
            )
        }
    }

    apply(from: urlCache.get("https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-deployer.gradle"))

    task importAdminApp << {
        File dest = file("${projectDir}/src/main/resources/org/tiogasolutions/notify/admin/app")
        if (dest.deleteDir() == false) throw new IOException("Unable to delete files: " + dest)

        copy {
            from "${projectDir}/../tioga-notify-admin-app"
            into dest
        }
    }
    task pws(type: Copy, dependsOn: assemble) {
        from "./build/libs/tioga-notify-server-grizzly-${project.version}.jar"
        into "./build/pws/"
        rename "tioga-notify-server-grizzly-${project.version}.jar", "tioga-notify-server-grizzly.jar"
    }

    build.dependsOn(importAdminApp)
}











