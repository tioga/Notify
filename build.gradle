buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:0.3.5'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.7'
    classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
  }
}

apply(from: "https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-java.gradle")

subprojects {

  apply(from: "https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-versions.gradle")
  apply(from: "https://raw.githubusercontent.com/tioga/build-scripts/master/build-config-reports.gradle")

  group = "org.tiogasolutions.notifyserver"
  version = "1.0"

  targetCompatibility = "1.8"
  sourceCompatibility = "1.8"

  configurations.all({
    resolutionStrategy({
      failOnVersionConflict()
      force(
        // In general, this list should be kept as small as possible.
        // That is resolve the conflict, don't just force it here.
        "org.slf4j:slf4j:1.7.10",
        "org.slf4j:slf4j-api:1.7.10",
        "org.javassist:javassist:3.18.1-GA",

        "org.thymeleaf:thymeleaf:2.1.4.RELEASE",

        // Need to force couch-ace to latest version.
        "com.fasterxml.jackson.core:jackson-annotations:2.5.1",
        "com.fasterxml.jackson.core:jackson-databind:2.5.1",
        "com.fasterxml.jackson.core:jackson-core:2.5.1",

        "org.glassfish.jersey.core:jersey-common:2.16",
        "org.glassfish.jersey.core:jersey-client:2.16",
        "org.glassfish.jersey.core:jersey-server:2.16",
        "org.glassfish.jersey.media:jersey-media-multipart:2.16",
      )
    })
  })

  dependencies {
    testCompile ("org.testng:testng:6.8.21")
  }

  ext {
    pomProjectDescription = "Notify Server"
    pomUrl = 'https://www.tiogasolutions.org'
    pomScmUrl = "https://github.com/tioga"
    pomScmConnection = "https://github.com/tioga/notify-server.git"
  }
}

// If we are publishing, expand tasks to include clean, build and install.
// This is to get around the gradle issue where task sequence cannot be controlled.
if (gradle.startParameter.taskNames.contains("publish")) {
    gradle.startParameter.setTaskNames(["publish", "clean", "build", "install", "distZip", "dist"])
    println "We are publishing, expanding task name to: ${gradle.startParameter.taskNames}"
}

// HACK - some of the versioning is now working, need to figure it out - HN
// Root project
project(':') {

    // Publish simple resets the version
    task publish() << {
        println "Publishing all modules"

        // Reset the version when we publish
        Console console = System.console()
        def versionPrompt = String.format("\nEnter version for publish [%s]: ", "1.0")
        String newVersion = console.readLine(versionPrompt)
        newVersion = (newVersion?.length() > 0) ? newVersion : "1.0"
        if (!newVersion || newVersion.length() < 3 || !newVersion.contains(".")) {
            throw new RuntimeException("Publish canceled, bad version: " + newVersion)
        }

        // HACK - some issues here, not sure what's going on
/*
        allprojects.each({proj ->
            println("Setting version: " + proj.name + ":" + newVersion)
            proj.version = newVersion
        })
*/
    }

    // Copies distribution from key modules into dist directory
    task copyDist(type: Copy) {
        def distModules = subprojects.findAll({proj ->
            (proj.name == "tioga-notifyserver-server-grizzly")
        })
        println "\nModules in distirbution: ${distModules}"
        distModules.each {distModule ->
            from(distModule.file('build/distributions'))
        }
        destinationDir = new File(projectDir.parentFile, "dist")
    }

    // Create the distribution - dependsOn copy, then zip up the wars.
    task dist(type:Zip, dependsOn: copyDist) {
        destinationDir = new File(projectDir.parentFile, "dist")
        baseName = project.name

        from(destinationDir)
        doFirst {
            // Set the version on the task here since it's not correct during configuration.
            version = project.version
            include("*-${version}.zip")
            exclude("lqnotify*.zip")
        }
        doLast  {
            println "Created distribution : ${dist.archivePath}"
        }
    }
}
